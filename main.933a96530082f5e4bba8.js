(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var a=n.getElementsByTagName("script");a.length&&(t=a[a.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})();const t=(()=>{const e=document.createElement("div");e.id="inputContainer";const t=document.createElement("input");t.type="text",t.className="city-input",t.name="city-input",e.appendChild(t);const n=document.createElement("button");return n.className="weather-search",n.textContent="Search",e.appendChild(n),e})(),n="228a3f9fe276acdf8c030f707cddc96f",a={weatherData:async function(e,t){try{const a=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&units=${t}&APPID=${n}`,{mode:"cors"});if(404!==a.status)return await a.json();alert("city not found")}catch(e){console.log(e)}}},r={hourlyWeatherData:async function(e,t){try{const a=await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${e}&units=${t}&appid=${n}`);if(404!==a.status)return await a.json();alert("city not found")}catch(e){console.log(e)}}},i=(e,t=null,n=null,a=null,r=null,i=null)=>"input"===e?o.formElementCreator(e,t,n,a):"img"!==e?o.creator(e,t,n,a):o.imageElementCreator(e,t,n,a,r,i),c=(e,t=null,n=null)=>{const a=document.createElement("div");return null!==t&&a.classList.add(t),null!==n&&a.setAttribute("id",`${n}`),e.forEach((e=>{const[t,n,r,c,o,l]=e;a.appendChild(i(t,n,r,c,o,l))})),a},o=(()=>{const e=(e,t,n,a)=>{const r=document.createElement(e);return null!==t&&r.classList.add(t),null!==n&&r.setAttribute("id",`${n}`),"input"!==e?"span"===e?null!==a&&(r.innerHTML=a):null!==a&&(r.textContent=a):r.type=a,r};return{creator:e,imageElementCreator:(t,n,a,r,i,c)=>{const o=e(t,n,a,r);return null!==c&&(o.alt=c),null!==i&&(o.src=i),o},formElementCreator:(t,n,a,r)=>e(t,n,a,r)}})(),l=(()=>{const e=document.createElement("div");e.id="weatherContainer";const t=c([["p","cityName"]],"weather-header"),n=c([["button","metric",null,"C"],["button","imperial",null,"F"]],"units");t.append(n);const a=document.createElement("div");a.className="weather-details";const r=document.createElement("img");r.className="weather-img",r.src="#",a.appendChild(r);const o=document.createElement("p");o.className="main-weather",a.appendChild(o);const l=document.createElement("div");l.className="other-details";const s=document.createElement("p");s.className="weather-text",l.appendChild(s);const u=c([["p","max-temp",null],["p","min-temp",null],["p","visibility",null],["p","humidity",null]],"other-weather-info"),d=i("div","hourly-weather");for(let e=0;e<40;e++){const t=c([["p","day"],["img","weather-img"],["p","min-max"],["p","desc"]],"hourly-weather-"+e);d.appendChild(t)}const m=i("img","loader-image");return e.appendChild(t),e.appendChild(a),e.appendChild(l),e.appendChild(u),e.appendChild(d),e.appendChild(m),e})(),s=e.p+"bb036aaf0388f2d90df9db1855848943.gif",u=document.querySelector("#content");u.appendChild(t),u.appendChild(l);const d=document.querySelector(".city-input"),m=document.querySelector(".weather-search"),p=document.querySelector(".main-weather"),h=document.querySelector(".weather-img"),y=document.querySelector(".weather-header>.units"),w=document.querySelector(".cityName"),f=document.querySelector("#weatherContainer>.loader-image");f.src=s;let g={unit:"metric",symbol:"C"};m.addEventListener("click",(()=>{""!==d.value?($(d.value,g.unit),b(d.value,g.unit)):alert("city name must not be empty")}));const C=(e,t)=>{const n=document.querySelectorAll(".other-weather-info>p"),[a,r,i,c]=Array.from(n);a.innerHTML=`Max: ${e.main.temp_max}<span class='units'>&#176;${t}</span>`,r.innerHTML=`Min: ${e.main.temp_min}<span class='units'>&#176;${t}</span>`,i.textContent=`Visibility: ${Math.floor(e.visibility/1e3)}km`,c.textContent=`Humidity: ${e.main.humidity}%`},$=(e,t)=>{f.classList.add("show_loader"),a.weatherData(e,t).then((function(e){((e,t)=>{w.innerHTML=`${e.name}<span>, ${e.sys.country}</span>`,p.innerHTML=`${e.main.temp}<span class='units'>&#176;${t}</span>`,h.src=`http://openweathermap.org/img/wn/${e.weather[0].icon}@2x.png`,document.querySelector(".weather-text").innerHTML=`Feels like ${e.main.feels_like}<span>&#176;${t}</span>. ${e.weather[0].description}`,C(e,t)})(e,g.symbol),f.classList.remove("show_loader")})).catch((e=>{console.log(e)}))},b=(e,t)=>{r.hourlyWeatherData(e,t).then((function(e){E(e.list,g.symbol)})).catch((e=>{console.log(e)}))},E=(e,t)=>{document.querySelectorAll(".hourly-weather>div").forEach((n=>{let a=Number(n.className.slice(-1));const[r,i,c,o]=Array.from(n.childNodes),l=new Date(1e3*e[a].dt);r.textContent=l.toDateString().replace("2023",""),i.src=`http://openweathermap.org/img/wn/${e[a].weather[0].icon}.png`,c.innerHTML=`${e[a].main.temp}<span>&#176;${t}</span>`,o.textContent=e[a].weather[0].description}))};window.addEventListener("load",(()=>{$("london",g.unit),b("london",g.unit),document.querySelector(".units>.metric").classList.add("selected")})),y.addEventListener("click",(e=>{document.querySelectorAll(".units>button").forEach((e=>{e.classList.remove("selected")})),g.unit=e.target.className;let t=w.textContent.split(",");$(t[0],g.unit),b(t[0],g.unit),"metric"===e.target.className?g.symbol="C":g.symbol="F",e.target.classList.add("selected")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,