(()=>{"use strict";var n={890:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([n.id,"*{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody{\n    width: 100%;\n    height: 100%;\n}\n\n#content{\n    width: 700px;\n    margin: 0 auto;\n    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n}\n\n#inputContainer{\n    display: flex;\n    justify-content: center;\n    margin-top: 10px;\n}\n\n#inputContainer>.city-input{\n    font-size: 1.2rem;\n    padding: 3px;\n    outline: none;\n    border: 1px solid gray;\n    border-radius: 3px;\n    border-right: none;\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n}\n\n#inputContainer>.weather-search{\n    padding: 5px 8px;\n    border: none;\n    background-color: black;\n    color: white;\n    border-radius: 3px;\n    border-bottom-left-radius: 0;\n    border-top-left-radius: 0;\n    /* margin-right: 10px; */\n}\n\n#inputContainer>.weather-search:hover{\n    cursor: pointer;\n}\n\n#inputContainer>.weather-search:active{\n    background-color: gray;\n}\n\n#weatherContainer>.weather-header{\n    display: flex;\n    justify-content: center;\n    margin-top: 20px;\n    align-items: center;\n    gap: 50px;\n}\n\n.weather-header>.cityName{\n    flex: 1;\n    margin-left: 260px;\n}\n\n.weather-header>.units{\n    margin-right: 10px;\n}\n\n.weather-header>.units>button{\n    padding: 5px 8px;\n    border: none;\n}\n\n.units>.metric{\n    border-top-left-radius: 3px;\n    border-bottom-left-radius: 3px;\n}\n\n.units>.imperial{\n    border-top-right-radius: 3px;\n    border-bottom-right-radius: 3px;\n}\n\n.weather-header>.units>button:hover{\n    cursor: pointer;\n}\n\n.weather-details{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 48px;\n}\n\n.weather-details>p{\n    font-size: 1.8rem;\n    font-weight: 200;\n    color: #ff6c00;\n}\n\n#weatherContainer>.other-details{\n    text-align: center;\n}\n\n#weatherContainer>.other-weather-info{\n    width: 450px;\n    margin: 25px auto;\n    display: flex;\n    justify-content: center;\n    gap: 10px;\n    padding: 8px 0;\n    border-left: 2px solid #ff6c00;\n}\n\n.selected{\n    background-color: #ff6c00;\n    color: white;\n}\n\n.hourly-weather{\n    height: 600px;\n    overflow-y:scroll;\n    scrollbar-width: none;\n    margin-top: 25px;\n}\n\n.hourly-weather>div{\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n    color: gray;\n}\n\n.hourly-weather>div>p{\n    flex: 1;\n}\n\n.hourly-weather>div>img{\n    margin-right: 48px;\n}","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,cAAc;IACd,mJAAmJ;AACvJ;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;IACjB,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,kBAAkB;IAClB,kBAAkB;IAClB,0BAA0B;IAC1B,6BAA6B;AACjC;;AAEA;IACI,gBAAgB;IAChB,YAAY;IACZ,uBAAuB;IACvB,YAAY;IACZ,kBAAkB;IAClB,4BAA4B;IAC5B,yBAAyB;IACzB,wBAAwB;AAC5B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,gBAAgB;IAChB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,OAAO;IACP,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;IAChB,YAAY;AAChB;;AAEA;IACI,2BAA2B;IAC3B,8BAA8B;AAClC;;AAEA;IACI,4BAA4B;IAC5B,+BAA+B;AACnC;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,SAAS;AACb;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;IAChB,cAAc;AAClB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,YAAY;IACZ,iBAAiB;IACjB,aAAa;IACb,uBAAuB;IACvB,SAAS;IACT,cAAc;IACd,8BAA8B;AAClC;;AAEA;IACI,yBAAyB;IACzB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,iBAAiB;IACjB,qBAAqB;IACrB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,OAAO;AACX;;AAEA;IACI,kBAAkB;AACtB",sourcesContent:["*{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody{\n    width: 100%;\n    height: 100%;\n}\n\n#content{\n    width: 700px;\n    margin: 0 auto;\n    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n}\n\n#inputContainer{\n    display: flex;\n    justify-content: center;\n    margin-top: 10px;\n}\n\n#inputContainer>.city-input{\n    font-size: 1.2rem;\n    padding: 3px;\n    outline: none;\n    border: 1px solid gray;\n    border-radius: 3px;\n    border-right: none;\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n}\n\n#inputContainer>.weather-search{\n    padding: 5px 8px;\n    border: none;\n    background-color: black;\n    color: white;\n    border-radius: 3px;\n    border-bottom-left-radius: 0;\n    border-top-left-radius: 0;\n    /* margin-right: 10px; */\n}\n\n#inputContainer>.weather-search:hover{\n    cursor: pointer;\n}\n\n#inputContainer>.weather-search:active{\n    background-color: gray;\n}\n\n#weatherContainer>.weather-header{\n    display: flex;\n    justify-content: center;\n    margin-top: 20px;\n    align-items: center;\n    gap: 50px;\n}\n\n.weather-header>.cityName{\n    flex: 1;\n    margin-left: 260px;\n}\n\n.weather-header>.units{\n    margin-right: 10px;\n}\n\n.weather-header>.units>button{\n    padding: 5px 8px;\n    border: none;\n}\n\n.units>.metric{\n    border-top-left-radius: 3px;\n    border-bottom-left-radius: 3px;\n}\n\n.units>.imperial{\n    border-top-right-radius: 3px;\n    border-bottom-right-radius: 3px;\n}\n\n.weather-header>.units>button:hover{\n    cursor: pointer;\n}\n\n.weather-details{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 48px;\n}\n\n.weather-details>p{\n    font-size: 1.8rem;\n    font-weight: 200;\n    color: #ff6c00;\n}\n\n#weatherContainer>.other-details{\n    text-align: center;\n}\n\n#weatherContainer>.other-weather-info{\n    width: 450px;\n    margin: 25px auto;\n    display: flex;\n    justify-content: center;\n    gap: 10px;\n    padding: 8px 0;\n    border-left: 2px solid #ff6c00;\n}\n\n.selected{\n    background-color: #ff6c00;\n    color: white;\n}\n\n.hourly-weather{\n    height: 600px;\n    overflow-y:scroll;\n    scrollbar-width: none;\n    margin-top: 25px;\n}\n\n.hourly-weather>div{\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n    color: gray;\n}\n\n.hourly-weather>div>p{\n    flex: 1;\n}\n\n.hourly-weather>div>img{\n    margin-right: 48px;\n}"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);r&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},i=[],s=0;s<n.length;s++){var c=n[s],A=r.base?c[0]+r.base:c[0],l=o[A]||0,d="".concat(A," ").concat(l);o[A]=l+1;var u=t(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var h=a(p,r);r.byIndex=s,e.splice(s,0,{identifier:d,updater:h,references:1})}i.push(d)}return i}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var s=t(o[i]);e[s].references--}for(var c=r(n,a),A=0;A<o.length;A++){var l=t(o[A]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{const n=(()=>{const n=document.createElement("div");n.id="inputContainer";const e=document.createElement("input");e.type="text",e.className="city-input",e.name="city-input",n.appendChild(e);const t=document.createElement("button");return t.className="weather-search",t.textContent="Search",n.appendChild(t),n})(),e=async function(n,e){try{const t=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${n}&units=${e}&APPID=228a3f9fe276acdf8c030f707cddc96f`,{mode:"cors"});if(404!==t.status)return await t.json();alert("city not found")}catch(n){console.log(n)}},r=async function(n,e){try{const t=await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${n}&units=${e}&appid=228a3f9fe276acdf8c030f707cddc96f`);if(404!==t.status)return await t.json();alert("city not found")}catch(n){console.log(n)}},a=(n,e=null,t=null,r=null,a=null,o=null)=>"input"===n?i.formElementCreator(n,e,t,r):"img"!==n?i.creator(n,e,t,r):i.imageElementCreator(n,e,t,r,a,o),o=(n,e=null,t=null)=>{const r=document.createElement("div");return null!==e&&r.classList.add(e),null!==t&&r.setAttribute("id",`${t}`),n.forEach((n=>{const[e,t,o,i,s,c]=n;r.appendChild(a(e,t,o,i,s,c))})),r},i=(()=>{const n=(n,e,t,r)=>{const a=document.createElement(n);return null!==e&&a.classList.add(e),null!==t&&a.setAttribute("id",`${t}`),"input"!==n?"span"===n?null!==r&&(a.innerHTML=r):null!==r&&(a.textContent=r):a.type=r,a};return{creator:n,imageElementCreator:(e,t,r,a,o,i)=>{const s=n(e,t,r,a);return null!==i&&(s.alt=i),null!==o&&(s.src=o),s},formElementCreator:(e,t,r,a)=>n(e,t,r,a)}})(),s=(()=>{const n=document.createElement("div");n.id="weatherContainer";const e=o([["p","cityName"]],"weather-header"),t=o([["button","metric",null,"C"],["button","imperial",null,"F"]],"units");e.append(t);const r=document.createElement("div");r.className="weather-details";const i=document.createElement("img");i.className="weather-img",i.src="#",r.appendChild(i);const s=document.createElement("p");s.className="main-weather",r.appendChild(s);const c=document.createElement("div");c.className="other-details";const A=document.createElement("p");A.className="weather-text",c.appendChild(A);const l=o([["p","max-temp",null],["p","min-temp",null],["p","visibility",null],["p","humidity",null]],"other-weather-info"),d=a("div","hourly-weather");for(let n=0;n<40;n++){const e=o([["p","day"],["img","weather-img"],["p","min-max"],["p","desc"]],"hourly-weather-"+n);d.appendChild(e)}return n.appendChild(e),n.appendChild(r),n.appendChild(c),n.appendChild(l),n.appendChild(d),n})();var c=t(379),A=t.n(c),l=t(795),d=t.n(l),u=t(569),p=t.n(u),h=t(565),m=t.n(h),f=t(216),C=t.n(f),g=t(589),y=t.n(g),B=t(890),b={};b.styleTagTransform=y(),b.setAttributes=m(),b.insert=p().bind(null,"head"),b.domAPI=d(),b.insertStyleElement=C(),A()(B.Z,b),B.Z&&B.Z.locals&&B.Z.locals;const x=document.querySelector("#content");x.appendChild(n),x.appendChild(s);const I=document.querySelector(".city-input"),w=document.querySelector(".weather-search"),v=document.querySelector(".main-weather"),E=document.querySelector(".weather-img"),S=document.querySelector(".weather-header>.units"),k=document.querySelector(".cityName");let j={unit:"metric",symbol:"C"};w.addEventListener("click",(()=>{N(I.value,j.unit),$(I.value,j.unit)}));const N=(n,t)=>{e(n,t).then((function(n){console.log(n),((n,e)=>{k.innerHTML=`${n.name}<span>, ${n.sys.country}</span>`,v.innerHTML=`${n.main.temp}<span class='units'>&#176;${e}</span>`,E.src=`http://openweathermap.org/img/wn/${n.weather[0].icon}@2x.png`,document.querySelector(".weather-text").innerHTML=`Feels like ${n.main.feels_like}<span>&#176;${e}</span>. ${n.weather[0].description}`,((n,e)=>{const t=document.querySelectorAll(".other-weather-info>p"),[r,a,o,i]=Array.from(t);r.innerHTML=`Max: ${n.main.temp_max}<span class='units'>&#176;${e}</span>`,a.innerHTML=`Min: ${n.main.temp_min}<span class='units'>&#176;${e}</span>`,o.textContent=`Visibility: ${Math.floor(n.visibility/1e3)}km`,i.textContent=`Humidity: ${n.main.humidity}%`})(n,e)})(n,j.symbol)})).catch((n=>{console.log(n)}))},$=(n,e)=>{r(n,e).then((function(n){console.log(n.list),M(n.list,j.symbol)})).catch((n=>{console.log(n)}))},M=(n,e)=>{document.querySelectorAll(".hourly-weather>div").forEach((t=>{let r=Number(t.className.slice(-1));const[a,o,i,s]=Array.from(t.childNodes),c=new Date(1e3*n[r].dt);a.textContent=c.toDateString().replace("2023",""),o.src=`http://openweathermap.org/img/wn/${n[r].weather[0].icon}.png`,i.innerHTML=`${n[r].main.temp}<span>&#176;${e}</span>`,s.textContent=n[r].weather[0].description}))};window.addEventListener("load",(()=>{N("london",j.unit),$("london",j.unit),document.querySelector(".units>.metric").classList.add("selected")})),S.addEventListener("click",(n=>{document.querySelectorAll(".units>button").forEach((n=>{n.classList.remove("selected")})),j.unit=n.target.className;let e=k.textContent.split(",");N(e[0],j.unit),$(e[0],j.unit),"metric"===n.target.className?j.symbol="C":j.symbol="F",n.target.classList.add("selected")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,