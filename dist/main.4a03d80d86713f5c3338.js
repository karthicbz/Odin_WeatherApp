(()=>{"use strict";const e=(()=>{const e=document.createElement("div");e.id="inputContainer";const t=document.createElement("input");t.type="text",t.className="city-input",t.name="city-input",e.appendChild(t);const n=document.createElement("button");return n.className="weather-search",n.textContent="Search",e.appendChild(n),e})(),t={weatherData:async function(e,t){try{const n=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&units=${t}&APPID=228a3f9fe276acdf8c030f707cddc96f`,{mode:"cors"});if(404!==n.status)return await n.json();alert("city not found")}catch(e){console.log(e)}}},n={hourlyWeatherData:async function(e,t){try{const n=await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${e}&units=${t}&appid=228a3f9fe276acdf8c030f707cddc96f`);if(404!==n.status)return await n.json();alert("city not found")}catch(e){console.log(e)}}},a=(e,t=null,n=null,a=null,r=null,c=null)=>"input"===e?l.formElementCreator(e,t,n,a):"img"!==e?l.creator(e,t,n,a):l.imageElementCreator(e,t,n,a,r,c),r=(e,t=null,n=null)=>{const r=document.createElement("div");return null!==t&&r.classList.add(t),null!==n&&r.setAttribute("id",`${n}`),e.forEach((e=>{const[t,n,l,c,o,i]=e;r.appendChild(a(t,n,l,c,o,i))})),r},l=(()=>{const e=(e,t,n,a)=>{const r=document.createElement(e);return null!==t&&r.classList.add(t),null!==n&&r.setAttribute("id",`${n}`),"input"!==e?"span"===e?null!==a&&(r.innerHTML=a):null!==a&&(r.textContent=a):r.type=a,r};return{creator:e,imageElementCreator:(t,n,a,r,l,c)=>{const o=e(t,n,a,r);return null!==c&&(o.alt=c),null!==l&&(o.src=l),o},formElementCreator:(t,n,a,r)=>e(t,n,a,r)}})(),c=(()=>{const e=document.createElement("div");e.id="weatherContainer";const t=r([["p","cityName"]],"weather-header"),n=r([["button","metric",null,"C"],["button","imperial",null,"F"]],"units");t.append(n);const l=document.createElement("div");l.className="weather-details";const c=document.createElement("img");c.className="weather-img",c.src="#",l.appendChild(c);const o=document.createElement("p");o.className="main-weather",l.appendChild(o);const i=document.createElement("div");i.className="other-details";const s=document.createElement("p");s.className="weather-text",i.appendChild(s);const u=r([["p","max-temp",null],["p","min-temp",null],["p","visibility",null],["p","humidity",null]],"other-weather-info"),d=a("div","hourly-weather");for(let e=0;e<40;e++){const t=r([["p","day"],["img","weather-img"],["p","min-max"],["p","desc"]],"hourly-weather-"+e);d.appendChild(t)}return e.appendChild(t),e.appendChild(l),e.appendChild(i),e.appendChild(u),e.appendChild(d),e})(),o=document.querySelector("#content");o.appendChild(e),o.appendChild(c);const i=document.querySelector(".city-input"),s=document.querySelector(".weather-search"),u=document.querySelector(".main-weather"),d=document.querySelector(".weather-img"),m=document.querySelector(".weather-header>.units"),p=document.querySelector(".cityName");let h={unit:"metric",symbol:"C"};s.addEventListener("click",(()=>{w(i.value,h.unit),f(i.value,h.unit)}));const y=(e,t)=>{const n=document.querySelectorAll(".other-weather-info>p"),[a,r,l,c]=Array.from(n);a.innerHTML=`Max: ${e.main.temp_max}<span class='units'>&#176;${t}</span>`,r.innerHTML=`Min: ${e.main.temp_min}<span class='units'>&#176;${t}</span>`,l.textContent=`Visibility: ${Math.floor(e.visibility/1e3)}km`,c.textContent=`Humidity: ${e.main.humidity}%`},w=(e,n)=>{t.weatherData(e,n).then((function(e){console.log(e),((e,t)=>{p.innerHTML=`${e.name}<span>, ${e.sys.country}</span>`,u.innerHTML=`${e.main.temp}<span class='units'>&#176;${t}</span>`,d.src=`http://openweathermap.org/img/wn/${e.weather[0].icon}@2x.png`,document.querySelector(".weather-text").innerHTML=`Feels like ${e.main.feels_like}<span>&#176;${t}</span>. ${e.weather[0].description}`,y(e,t)})(e,h.symbol)})).catch((e=>{console.log(e)}))},f=(e,t)=>{n.hourlyWeatherData(e,t).then((function(e){console.log(e.list),C(e.list,h.symbol)})).catch((e=>{console.log(e)}))},C=(e,t)=>{document.querySelectorAll(".hourly-weather>div").forEach((n=>{let a=Number(n.className.slice(-1));const[r,l,c,o]=Array.from(n.childNodes),i=new Date(1e3*e[a].dt);r.textContent=i.toDateString().replace("2023",""),l.src=`http://openweathermap.org/img/wn/${e[a].weather[0].icon}.png`,c.innerHTML=`${e[a].main.temp}<span>&#176;${t}</span>`,o.textContent=e[a].weather[0].description}))};window.addEventListener("load",(()=>{w("london",h.unit),f("london",h.unit),document.querySelector(".units>.metric").classList.add("selected")})),m.addEventListener("click",(e=>{document.querySelectorAll(".units>button").forEach((e=>{e.classList.remove("selected")})),h.unit=e.target.className;let t=p.textContent.split(",");w(t[0],h.unit),f(t[0],h.unit),"metric"===e.target.className?h.symbol="C":h.symbol="F",e.target.classList.add("selected")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,