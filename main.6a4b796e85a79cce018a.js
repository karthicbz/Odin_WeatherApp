(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var a=n.getElementsByTagName("script");a.length&&(t=a[a.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})();const t=(()=>{const e=document.createElement("div");e.id="inputContainer";const t=document.createElement("input");t.type="text",t.className="city-input",t.name="city-input",e.appendChild(t);const n=document.createElement("button");return n.className="weather-search",n.textContent="Search",e.appendChild(n),e})(),n={weatherData:async function(e,t){try{const n=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&units=${t}&APPID=228a3f9fe276acdf8c030f707cddc96f`,{mode:"cors"});if(404!==n.status)return await n.json();alert("city not found")}catch(e){console.log(e)}}},a={hourlyWeatherData:async function(e,t){try{const n=await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${e}&units=${t}&appid=228a3f9fe276acdf8c030f707cddc96f`);if(404!==n.status)return await n.json();alert("city not found")}catch(e){console.log(e)}}},r=(e,t=null,n=null,a=null,r=null,c=null)=>"input"===e?i.formElementCreator(e,t,n,a):"img"!==e?i.creator(e,t,n,a):i.imageElementCreator(e,t,n,a,r,c),c=(e,t=null,n=null)=>{const a=document.createElement("div");return null!==t&&a.classList.add(t),null!==n&&a.setAttribute("id",`${n}`),e.forEach((e=>{const[t,n,c,i,o,l]=e;a.appendChild(r(t,n,c,i,o,l))})),a},i=(()=>{const e=(e,t,n,a)=>{const r=document.createElement(e);return null!==t&&r.classList.add(t),null!==n&&r.setAttribute("id",`${n}`),"input"!==e?"span"===e?null!==a&&(r.innerHTML=a):null!==a&&(r.textContent=a):r.type=a,r};return{creator:e,imageElementCreator:(t,n,a,r,c,i)=>{const o=e(t,n,a,r);return null!==i&&(o.alt=i),null!==c&&(o.src=c),o},formElementCreator:(t,n,a,r)=>e(t,n,a,r)}})(),o=(()=>{const e=document.createElement("div");e.id="weatherContainer";const t=c([["p","cityName"]],"weather-header"),n=c([["button","metric",null,"C"],["button","imperial",null,"F"]],"units");t.append(n);const a=document.createElement("div");a.className="weather-details";const i=document.createElement("img");i.className="weather-img",i.src="#",a.appendChild(i);const o=document.createElement("p");o.className="main-weather",a.appendChild(o);const l=document.createElement("div");l.className="other-details";const s=document.createElement("p");s.className="weather-text",l.appendChild(s);const u=c([["p","max-temp",null],["p","min-temp",null],["p","visibility",null],["p","humidity",null]],"other-weather-info"),d=r("div","hourly-weather");for(let e=0;e<40;e++){const t=c([["p","day"],["img","weather-img"],["p","min-max"],["p","desc"]],"hourly-weather-"+e);d.appendChild(t)}const m=r("img","loader-image");return e.appendChild(t),e.appendChild(a),e.appendChild(l),e.appendChild(u),e.appendChild(d),e.appendChild(m),e})(),l=e.p+"bb036aaf0388f2d90df9db1855848943.gif",s=document.querySelector("#content");s.appendChild(t),s.appendChild(o);const u=document.querySelector(".city-input"),d=document.querySelector(".weather-search"),m=document.querySelector(".main-weather"),p=document.querySelector(".weather-img"),h=document.querySelector(".weather-header>.units"),y=document.querySelector(".cityName"),w=document.querySelector("#weatherContainer>.loader-image");w.src=l;let f={unit:"metric",symbol:"C"};d.addEventListener("click",(()=>{""!==u.value?(C(u.value,f.unit),$(u.value,f.unit)):alert("city name must not be empty")}));const g=(e,t)=>{const n=document.querySelectorAll(".other-weather-info>p"),[a,r,c,i]=Array.from(n);a.innerHTML=`Max: ${e.main.temp_max}<span class='units'>&#176;${t}</span>`,r.innerHTML=`Min: ${e.main.temp_min}<span class='units'>&#176;${t}</span>`,c.textContent=`Visibility: ${Math.floor(e.visibility/1e3)}km`,i.textContent=`Humidity: ${e.main.humidity}%`},C=(e,t)=>{w.classList.add("show_loader"),n.weatherData(e,t).then((function(e){((e,t)=>{y.innerHTML=`${e.name}<span>, ${e.sys.country}</span>`,m.innerHTML=`${e.main.temp}<span class='units'>&#176;${t}</span>`,p.src=`http://openweathermap.org/img/wn/${e.weather[0].icon}@2x.png`,document.querySelector(".weather-text").innerHTML=`Feels like ${e.main.feels_like}<span>&#176;${t}</span>. ${e.weather[0].description}`,g(e,t)})(e,f.symbol),w.classList.remove("show_loader")})).catch((e=>{console.log(e)}))},$=(e,t)=>{a.hourlyWeatherData(e,t).then((function(e){b(e.list,f.symbol)})).catch((e=>{console.log(e)}))},b=(e,t)=>{document.querySelectorAll(".hourly-weather>div").forEach((n=>{let a=Number(n.className.slice(-1));const[r,c,i,o]=Array.from(n.childNodes),l=new Date(1e3*e[a].dt);r.textContent=l.toDateString().replace("2023",""),c.src=`http://openweathermap.org/img/wn/${e[a].weather[0].icon}.png`,i.innerHTML=`${e[a].main.temp}<span>&#176;${t}</span>`,o.textContent=e[a].weather[0].description}))};window.addEventListener("load",(()=>{C("london",f.unit),$("london",f.unit),document.querySelector(".units>.metric").classList.add("selected")})),h.addEventListener("click",(e=>{document.querySelectorAll(".units>button").forEach((e=>{e.classList.remove("selected")})),f.unit=e.target.className;let t=y.textContent.split(",");C(t[0],f.unit),$(t[0],f.unit),"metric"===e.target.className?f.symbol="C":f.symbol="F",e.target.classList.add("selected")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,